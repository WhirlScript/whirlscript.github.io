import{_ as e,o as a,c as s,Q as t}from"./chunks/framework.jBbNkKut.js";const g=JSON.parse('{"title":"运行命令","description":"","frontmatter":{"prev":{"text":"模块","link":"/zh/guide/getting-started/modules"},"next":false},"headers":[],"relativePath":"zh/guide/getting-started/execute/index.md","filePath":"zh/guide/getting-started/execute.md"}'),o={name:"zh/guide/getting-started/execute/index.md"},c=t(`<h1 id="运行命令" tabindex="-1">运行命令 <a class="header-anchor" href="#运行命令" aria-label="Permalink to &quot;运行命令&quot;">​</a></h1><p>WhirlScript 提供了几种方式来运行命令。</p><h2 id="exec-函数" tabindex="-1"><code>exec</code> 函数 <a class="header-anchor" href="#exec-函数" aria-label="Permalink to &quot;\`exec\` 函数&quot;">​</a></h2><p><code>exec</code> 函数是最简单的方法，它接受一个字符串参数，如：</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">exec(&quot;echo 123&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">exec(&quot;echo 123&quot;);</span></span></code></pre></div><p>这个命令返回一个 <code>command</code> 类型的对象，你可以使用 <code>pipe</code> 函数将其输出重定向到另一个命令的输入，用 <code>toFile</code>, <code>toNewFile</code> 重定向到文件，或是 <code>getOutput</code> 捕获其输出到一个变量，如：</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">const output: string = getOutput(exec(&quot;echo 123&quot;));</span></span>
<span class="line"><span style="color:#E1E4E8;">println(output); // 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">toNewFile(pipe(exec(&quot;echo 123&quot;), exec(&quot;tar&quot;)), &quot;output.tar&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">// 或使用链式调用语法</span></span>
<span class="line"><span style="color:#E1E4E8;">exec(&quot;echo 123&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .pipe(exec(&quot;tar&quot;))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .toNewFile(&quot;output.tar&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">const output: string = getOutput(exec(&quot;echo 123&quot;));</span></span>
<span class="line"><span style="color:#24292E;">println(output); // 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">toNewFile(pipe(exec(&quot;echo 123&quot;), exec(&quot;tar&quot;)), &quot;output.tar&quot;);</span></span>
<span class="line"><span style="color:#24292E;">// 或使用链式调用语法</span></span>
<span class="line"><span style="color:#24292E;">exec(&quot;echo 123&quot;)</span></span>
<span class="line"><span style="color:#24292E;">    .pipe(exec(&quot;tar&quot;))</span></span>
<span class="line"><span style="color:#24292E;">    .toNewFile(&quot;output.tar&quot;);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">⚠️注意</p><p><code>exec</code> 命令会将其中的如 <code>%</code>, <code>|</code> 等符号转义。如果不希望被转义，请使用 <code>\\%</code> 转义或使用 <code>raw</code> 函数。</p></div><h2 id="语句" tabindex="-1"><code>$</code> 语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;\`$\` 语句&quot;">​</a></h2><p>你可以使用 <code>$</code> 语句调用一个命令，它和 <code>exec</code> 的结果是一样的。例如：</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$&quot;echo 123&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$&quot;echo 123&quot;;</span></span></code></pre></div><h2 id="raw-函数" tabindex="-1"><code>raw</code> 函数 <a class="header-anchor" href="#raw-函数" aria-label="Permalink to &quot;\`raw\` 函数&quot;">​</a></h2><p><code>raw</code> 函数的内容会被直接写入脚本内，不会经过任何处理。<strong>请谨慎使用。</strong></p>`,13),n=[c];function p(l,i,r,d,u,h){return a(),s("div",null,n)}const E=e(o,[["render",p]]);export{g as __pageData,E as default};

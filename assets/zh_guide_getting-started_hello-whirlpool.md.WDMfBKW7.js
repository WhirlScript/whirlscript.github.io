import{_ as s,o as a,c as l,Q as e}from"./chunks/framework.jBbNkKut.js";const g=JSON.parse('{"title":"Hello Whirlpool!","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/getting-started/hello-whirlpool.md","filePath":"zh/guide/getting-started/hello-whirlpool.md","lastUpdated":1701574685000}'),o={name:"zh/guide/getting-started/hello-whirlpool.md"},p=e(`<h1 id="hello-whirlpool" tabindex="-1">Hello Whirlpool! <a class="header-anchor" href="#hello-whirlpool" aria-label="Permalink to &quot;Hello Whirlpool!&quot;">​</a></h1><p>接下来让我们了解下包管理器 <code>Whirlpool</code>。</p><h2 id="安装包" tabindex="-1">安装包 <a class="header-anchor" href="#安装包" aria-label="Permalink to &quot;安装包&quot;">​</a></h2><p>在项目根目录打开终端，输入：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wrp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wrp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span></span></code></pre></div><p>等待安装结束。</p><p>你可以看到项目目录下多了个文件夹 <code>wrs_packages</code>，这里包含你所安装的所有包。</p><p>如果你要使用版本管理（比如 Git）来管理 WhirlScript 项目的话，最好把这个文件夹添加到忽略列表中。</p><p>害怕同伴安装的依赖和你安装的有细微差别？别怕，还有 <code>whirlpool-lock.json</code> 呢！它可以保证你们安装的包是一模一样的。</p><h2 id="引入依赖" tabindex="-1">引入依赖 <a class="header-anchor" href="#引入依赖" aria-label="Permalink to &quot;引入依赖&quot;">​</a></h2><p>回到我们前面创建的 <code>main.wrs</code> 文件，改成：</p><div class="language-whirlscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">whirlscript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#import(&quot;hello&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">hello();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#import(&quot;hello&quot;);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">hello();</span></span></code></pre></div><h2 id="编译和运行" tabindex="-1">编译和运行 <a class="header-anchor" href="#编译和运行" aria-label="Permalink to &quot;编译和运行&quot;">​</a></h2><p>像前面一样编译运行吧！</p><p>觉得为了运行要新开一个终端多些一行命令很麻烦？试试命令行参数 <code>-r</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wrsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-r</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wrsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span></span></code></pre></div><p>这会在编译结束后自动运行编译输出的脚本（仅限于当前平台对应的，如果编译目标中不包含当前平台，这个参数不会做任何事。正好相反，你会得到一条警告）。</p>`,17),n=[p];function t(c,r,i,d,h,y){return a(),l("div",null,n)}const _=s(o,[["render",t]]);export{g as __pageData,_ as default};

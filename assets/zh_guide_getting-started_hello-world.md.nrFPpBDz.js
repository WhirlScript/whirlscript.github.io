import{_ as s,o as a,c as e,Q as l}from"./chunks/framework.sAb1y1-G.js";const g=JSON.parse('{"title":"Hello WhirlScript!","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/getting-started/hello-world.md","filePath":"zh/guide/getting-started/hello-world.md","lastUpdated":1700968973000}'),o={name:"zh/guide/getting-started/hello-world.md"},p=l(`<h1 id="hello-whirlscript" tabindex="-1">Hello WhirlScript! <a class="header-anchor" href="#hello-whirlscript" aria-label="Permalink to &quot;Hello WhirlScript!&quot;">​</a></h1><p>现在我想你已经安装完 WhirlScript。</p><p>接下来让我们写一个简单的程序输出 <code>Hello World!</code>。</p><h2 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h2><p>你需要为这个项目找一个空目录，并且在这里打开终端，输入：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wrp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wrp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre></div><p>在回答完一系列问题后，你的项目就初始化好了。</p><h2 id="写一些代码" tabindex="-1">写一些代码 <a class="header-anchor" href="#写一些代码" aria-label="Permalink to &quot;写一些代码&quot;">​</a></h2><p>接下来，新建一个叫做 <code>main.wrs</code> 的文件。这将是这个项目的入口点文件。</p><p>打开这个文件，输入这些：</p><div class="language-whirlscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">whirlscript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">println(&quot;Hello world!&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">println(&quot;Hello world!&quot;);</span></span></code></pre></div><h2 id="编译和运行" tabindex="-1">编译和运行 <a class="header-anchor" href="#编译和运行" aria-label="Permalink to &quot;编译和运行&quot;">​</a></h2><h3 id="编译配置" tabindex="-1">编译配置 <a class="header-anchor" href="#编译配置" aria-label="Permalink to &quot;编译配置&quot;">​</a></h3><p>在编译之前，我们需要先编写编译配置。</p><p>在项目根目录新建一个叫做 <code>build.json</code> 的文件，并且在里面输入：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;entrypoint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;main&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;entrypoint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;main&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此处的 <code>entrypoint</code> 指的是我们前面新建的 <code>main.wrs</code> 文件。如果你使用了其它文件名或者放在了文件夹中，请对应修改它。</p><h3 id="编译" tabindex="-1">编译！ <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译！&quot;">​</a></h3><p>编译命令特别简单。我们已经在配置里面写上了编译器需要知道的信息，所以只需要在这里打开终端，输入：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wrsc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wrsc</span></span></code></pre></div><p>编译得到的脚本位于项目目录的 <code>build</code> 文件夹底下，你可以在里面找到它。</p><p>对应你的操作系统，你可以找到 <code>hello-world.bat</code> 或 <code>hello-world.sh</code>。</p><p>接下来，简单的打开一个终端，运行它！</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ ./hello-world</span></span>
<span class="line"><span style="color:#e1e4e8;">Hello World!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ ./hello-world</span></span>
<span class="line"><span style="color:#24292e;">Hello World!</span></span></code></pre></div><p>看着屏幕上印出的 <code>Hello World!</code>，我们已经向前了一大步了！</p>`,25),n=[p];function t(c,r,i,d,h,u){return a(),e("div",null,n)}const b=s(o,[["render",t]]);export{g as __pageData,b as default};

import{_ as e,o as a,c as o,Q as s}from"./chunks/framework.jBbNkKut.js";const m=JSON.parse('{"title":"Hello Whirlpool!","description":"","frontmatter":{"prev":{"text":"Hello World!","link":"/guide/getting-started/hello-world"},"next":{"text":"Grammar and Data Types","link":"/guide/getting-started/grammar-and-types"}},"headers":[],"relativePath":"guide/getting-started/hello-whirlpool.md","filePath":"guide/getting-started/hello-whirlpool.md"}'),l={name:"guide/getting-started/hello-whirlpool.md"},n=s(`<h1 id="hello-whirlpool" tabindex="-1">Hello Whirlpool! <a class="header-anchor" href="#hello-whirlpool" aria-label="Permalink to &quot;Hello Whirlpool!&quot;">​</a></h1><p>Next, let&#39;s learn about the package manager <code>Whirlpool</code>.</p><h2 id="installing-packages" tabindex="-1">Installing Packages <a class="header-anchor" href="#installing-packages" aria-label="Permalink to &quot;Installing Packages&quot;">​</a></h2><p>Open the terminal in the project root directory and enter:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wrp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wrp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span></span></code></pre></div><p>Wait for the installation to finish.</p><p>You can see that there is an additional folder <code>wrs_packages</code> in the project directory, which contains all the packages you have installed.</p><p>If you want to use version management (such as Git) to manage WhirlScript projects, it is best to add this folder to the ignore list.</p><p>Are you afraid that the dependencies installed by your peers will have subtle differences from what you installed? Don&#39;t worry, there is <code>whirlpool-lock.json</code>! It can ensure that the packages you install are exactly the same.</p><h2 id="importing-dependencies" tabindex="-1">Importing Dependencies <a class="header-anchor" href="#importing-dependencies" aria-label="Permalink to &quot;Importing Dependencies&quot;">​</a></h2><p>Go back to the <code>main.wrs</code> file we created earlier and change it to:</p><div class="language-whirlscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">whirlscript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#import(&quot;hello&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">hello();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#import(&quot;hello&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">hello();</span></span></code></pre></div><h2 id="compilation-and-running" tabindex="-1">Compilation and Running <a class="header-anchor" href="#compilation-and-running" aria-label="Permalink to &quot;Compilation and Running&quot;">​</a></h2><p>Compile and run as before!</p><p>Do you think it&#39;s troublesome to open a new terminal and add a line of command for running? Try the command line parameter <code>-r</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">wrsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-r</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">wrsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span></span></code></pre></div><p>This will automatically run the compiled script after the compilation is completed (only for the corresponding current platform, if the compilation target does not include the current platform, this parameter will not do anything. On the contrary, you will get a warning).</p>`,17),t=[n];function p(i,r,c,d,h,g){return a(),o("div",null,t)}const y=e(l,[["render",p]]);export{m as __pageData,y as default};

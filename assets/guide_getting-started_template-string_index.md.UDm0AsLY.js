import{_ as s,o as e,c as a,Q as t}from"./chunks/framework.jBbNkKut.js";const m=JSON.parse('{"title":"Template String","description":"","frontmatter":{"prev":{"text":"Expressions and Operators","link":"/en/guide/getting-started/expressions-and-operators"},"next":{"text":"Struct","link":"/en/guide/getting-started/struct"}},"headers":[],"relativePath":"guide/getting-started/template-string/index.md","filePath":"guide/getting-started/template-string.md"}'),n={name:"guide/getting-started/template-string/index.md"},p=t('<h1 id="template-string" tabindex="-1">Template String <a class="header-anchor" href="#template-string" aria-label="Permalink to &quot;Template String&quot;">​</a></h1><p><strong>Template string</strong> is a string wrapped in backticks (<code>`</code>), allowing special structures for <strong>multiline strings</strong> and <strong>string interpolation</strong> with embedded expressions.</p><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to &quot;Syntax&quot;">​</a></h2><p>Template strings are wrapped in backticks (<code>`</code>) and may contain interpolation, an embedded expression separated by a dollar sign and braces: <code>${expression}</code>.</p><p>For example:</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">`12</span></span>\n<span class="line"><span style="color:#E1E4E8;">3`;</span></span>\n<span class="line"><span style="color:#E1E4E8;">`1 + 1 = ${1 + 1}`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">`12</span></span>\n<span class="line"><span style="color:#24292E;">3`;</span></span>\n<span class="line"><span style="color:#24292E;">`1 + 1 = ${1 + 1}`;</span></span></code></pre></div><p>To escape a backtick (<code>`</code>) in a template string, precede the backtick with a backslash (<code>\\</code>). Likewise, for escaping, the dollar sign <code>$</code> to prevent interpolation can also be escaped with a backslash:</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">`\\`` == &quot;`&quot;; // true</span></span>\n<span class="line"><span style="color:#E1E4E8;">`\\${1}` == &quot;${1}&quot;; // true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">`\\`` == &quot;`&quot;; // true</span></span>\n<span class="line"><span style="color:#24292E;">`\\${1}` == &quot;${1}&quot;; // true</span></span></code></pre></div><p>Template strings can be multiline and nested:</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">`1 + 1 = ?</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">${`1 + 1 = ${1 + 1}`}`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">`1 + 1 = ?</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">${`1 + 1 = ${1 + 1}`}`;</span></span></code></pre></div>',10),i=[p];function l(o,r,c,d,g,h){return e(),a("div",null,i)}const E=s(n,[["render",l]]);export{m as __pageData,E as default};

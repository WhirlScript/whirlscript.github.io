import{_ as t,o as e,c as o,Q as n}from"./chunks/framework.jBbNkKut.js";const m=JSON.parse('{"title":"Annotations","description":"","frontmatter":{"prev":{"text":"Target Specification","link":"/en/guide/getting-started/target-specify"},"next":{"text":"Modules","link":"/en/guide/getting-started/modules"}},"headers":[],"relativePath":"guide/getting-started/annotation/index.md","filePath":"guide/getting-started/annotation.md"}'),a={name:"guide/getting-started/annotation/index.md"},i=n('<h1 id="annotations" tabindex="-1">Annotations <a class="header-anchor" href="#annotations" aria-label="Permalink to &quot;Annotations&quot;">​</a></h1><p>By now, we&#39;ve already encountered several annotations.</p><p>Annotations are a special type of comment. To put it more vividly, annotations are comments for the compiler, influencing how it processes the following statements.</p><p>WhirlScript&#39;s annotations are divided into two types: statement annotations and declaration annotations.</p><h2 id="statement-annotations" tabindex="-1">Statement Annotations <a class="header-anchor" href="#statement-annotations" aria-label="Permalink to &quot;Statement Annotations&quot;">​</a></h2><p>The existing statement annotations include:</p><table><thead><tr><th>Annotation</th><th>Meaning</th></tr></thead><tbody><tr><td><code>@sh</code></td><td>The following statement or block will only be parsed when compiling to sh scripts</td></tr><tr><td><code>@bat</code></td><td>The following statement or block will only be parsed when compiling to bat scripts</td></tr></tbody></table><p>For the usage of <code>@sh</code> and <code>@bat</code>, see <a href="/guide/getting-started/target-specify">Target Specification</a>.</p><h2 id="declaration-annotations" tabindex="-1">Declaration Annotations <a class="header-anchor" href="#declaration-annotations" aria-label="Permalink to &quot;Declaration Annotations&quot;">​</a></h2><p>The existing declaration annotations include:</p><table><thead><tr><th>Annotation</th><th>Meaning</th></tr></thead><tbody><tr><td><code>@deprecated</code></td><td>The following declaration has been deprecated.</td></tr><tr><td><code>@final</code></td><td>The following declared variable or function is final, its name will not be modified in the compiled result.</td></tr><tr><td><code>@env</code></td><td>The following declared variable is an environment variable. It needs to be declared as a constant.</td></tr><tr><td><code>@editable</code></td><td>The following declared variable is editable, it will be placed at the top of the script after compilation to allow user editing.</td></tr><tr><td><code>@optional</code></td><td>The following declared variable or function is optional, if it is not used by non-optional parts of the code, it will not be added to the compiled output.</td></tr><tr><td><code>@noScope</code></td><td>The following declared <strong>macro function</strong> does not have its own scope.</td></tr><tr><td><code>@constexpr</code></td><td>The following declared <strong>macro function</strong> returns a compile-time constant (including macro constants and literals).</td></tr><tr><td><code>@noPreprocess</code></td><td>The following statement (such as <strong>if</strong>, <strong>for</strong>, <strong>while</strong>) will not be expanded during compilation, suitable for infinite loop scenarios.</td></tr></tbody></table>',11),d=[i];function r(s,l,c,h,p,g){return e(),o("div",null,d)}const u=t(a,[["render",r]]);export{m as __pageData,u as default};

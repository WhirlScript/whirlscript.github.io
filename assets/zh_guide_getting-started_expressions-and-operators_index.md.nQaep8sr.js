import{_ as t,o as e,c as a,Q as s}from"./chunks/framework.jBbNkKut.js";const g=JSON.parse('{"title":"表达式与运算符","description":"","frontmatter":{"prev":{"text":"函数","link":"/zh/guide/getting-started/function"},"next":{"text":"模板字符串","link":"/zh/guide/getting-started/template-string"}},"headers":[],"relativePath":"zh/guide/getting-started/expressions-and-operators/index.md","filePath":"zh/guide/getting-started/expressions-and-operators.md"}'),d={name:"zh/guide/getting-started/expressions-and-operators/index.md"},o=s(`<h1 id="表达式与运算符" tabindex="-1">表达式与运算符 <a class="header-anchor" href="#表达式与运算符" aria-label="Permalink to &quot;表达式与运算符&quot;">​</a></h1><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>WhirlScript 的运算符和其它编程语言（如 Java、JS）很相似。</p><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><p>一个 <strong>赋值运算符 (assignment operator)</strong> 将它右边操作数的值赋给它左边的操作数。最简单的赋值运算符是等于（<code>=</code>），它将右边的操作数值赋给左边的操作数。那么 <code>x = y</code> 就是将 y 的值赋给 x。</p><p>还有一些复合赋值操作符，它们是下表列出的这些操作的缩写：</p><table><thead><tr><th>名字</th><th>简写的操作符</th><th>含义</th></tr></thead><tbody><tr><td>赋值 (Assignment)</td><td><code>x = y</code></td><td><code>x = y</code></td></tr><tr><td>加法赋值 (Addition assignment)</td><td><code>x += y</code></td><td><code>x = x + y</code></td></tr><tr><td>减法赋值 (Subtraction assignment)</td><td><code>x -= y</code></td><td><code>x = x - y</code></td></tr><tr><td>乘法赋值 (Multiplication assignment)</td><td><code>x *= y</code></td><td><code>x = x * y</code></td></tr><tr><td>除法赋值 (Division assignment)</td><td><code>x /= y</code></td><td><code>x = x / y</code></td></tr><tr><td>求余赋值 (Remainder assignment)</td><td><code>x %= y</code></td><td><code>x = x % y</code></td></tr><tr><td>求幂赋值 (Exponentiation assignment)</td><td><code>x **= y</code></td><td><code>x = x ** y</code></td></tr><tr><td>左移位赋值 (Left shift assignment)</td><td><code>x &lt;&lt;= y</code></td><td><code>x = x &lt;&lt; y</code></td></tr><tr><td>右移位赋值 (Right shift assignment)</td><td><code>x &gt;&gt;= y</code></td><td><code>x = x &gt;&gt; y</code></td></tr><tr><td>按位与赋值 (Bitwise AND assignment)</td><td><code>x &amp;= y</code></td><td><code>x = x &amp; y</code></td></tr><tr><td>按位异或赋值 (Bitwise XOR assignment)</td><td><code>x ^= y</code></td><td><code>x = x ^ y</code></td></tr><tr><td>按位或赋值 (Bitwise OR assignment)</td><td><code>x |= y</code></td><td><code>x = x | y</code></td></tr></tbody></table><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><p><strong>比较运算符</strong>比较它的操作数并返回一个基于表达式是否为真的逻辑值。操作数可以是数字，字符串，逻辑，对象值。字符串比较是基于标准的字典顺序，使用 Unicode 值。在多数情况下，如果两个操作数不是相同的类型，JavaScript 会尝试转换它们为恰当的类型来比较。这种行为通常发生在数字作为操作数的比较。类型转换的例外是使用 <code>===</code> 和 <code>!==</code> 操作符，它们会执行严格的相等和不相等比较。这些运算符不会在检查相等之前转换操作数的类型。下面的表格描述了该示例代码中的各比较运算符</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var var1 = 3;</span></span>
<span class="line"><span style="color:#E1E4E8;">var var2 = 4;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var var1 = 3;</span></span>
<span class="line"><span style="color:#24292E;">var var2 = 4;</span></span></code></pre></div><table><thead><tr><th>运算符</th><th>描述</th><th>返回 true 的示例</th></tr></thead><tbody><tr><td>等于 Equal (<code>==</code>)</td><td>如果两边操作数相等时返回 true。</td><td><code>3 == var1</code> <code>&quot;3&quot; == var1</code> <code>3 == &#39;3&#39;</code></td></tr><tr><td>不等于 Not equal (<code>!=</code>)</td><td>如果两边操作数不相等时返回 true</td><td><code>var1 != 4</code> <code>var2 != &quot;3&quot;</code></td></tr><tr><td>大于 Greater than (<code>&gt;</code>)</td><td>左边的操作数大于右边的操作数返回 true</td><td><code>var2 &gt; var1</code> <code>&quot;12&quot; &gt; 2</code></td></tr><tr><td>大于等于 Greater than or equal (<code>&gt;=</code>)</td><td>左边的操作数大于或等于右边的操作数返回 true</td><td><code>var2 &gt;= var1</code> <code>var1 &gt;= 3</code></td></tr><tr><td>小于 Less than (<code>&lt;</code>)</td><td>左边的操作数小于右边的操作数返回 true</td><td><code>var1 &lt; var2</code> <code>&quot;2&quot; &lt; 12</code></td></tr><tr><td>小于等于 Less than or equal (<code>&lt;=</code>)</td><td>左边的操作数小于或等于右边的操作数返回 true</td><td><code>var1 &lt;= var2</code> <code>var2 &lt;= 5</code></td></tr></tbody></table><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><p>算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。标准的算术运算符就是加减乘除 (<code>+</code> <code>-</code> <code>*</code> <code>/</code>)。</p><p>WhirlScript 并不提供浮点类型。这意味着，您得不到小数。结果将会向下取整。例如：</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">1 / 2; // 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1 / 2; // 0</span></span></code></pre></div><p>除了标准的算术运算符，WhirlScript 还提供了下表中的算术运算符。</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>求余（<code>%</code>）</td><td>二元运算符。返回相除之后的余数。</td><td>12 % 5 返回 2。</td></tr><tr><td>自增（<code>++</code>）</td><td>一元运算符。将操作数的值加一。如果放在操作数前面（<code>++x</code>），则返回加一后的值；如果放在操作数后面（<code>x++</code>），则返回操作数原值，然后再将操作数加一。</td><td><code>var x=3;</code> <code>println(++x); //4</code> <code>println(x); //4</code> <code>var y=3;</code> <code>println(y++); //3</code> <code>println(y); //4</code></td></tr><tr><td>自减（<code>--</code>）</td><td>一元运算符。将操作数的值减一。前后缀两种用法的返回值类似自增运算符。</td><td><code>var x=3;</code> <code>println(--x); //2</code> <code>var y=3;</code> <code>println(y--); //3</code></td></tr><tr><td>一元负值符（<code>-</code>）</td><td>一元运算符，返回操作数的负值。</td><td><code>var x=3;</code> <code>println(-x); //-3</code></td></tr><tr><td>一元正值符（<code>+</code>）</td><td>一元运算符，如果操作数在之前不是数值，试图将其转换为数值。</td><td><code>println( +&#39;3&#39; ); // 3</code> <code>println( &#39;3&#39; ); // &#39;3&#39;</code> <code>println(+true); // 1</code></td></tr><tr><td>指数运算符（<code>**</code>）</td><td>计算底数（<code>base</code>）的指数（<code>exponent</code>）次方，表示为 <code>base^exponent</code>。</td><td><code>2 ** 3</code> 返回 <code>8</code>。<code>10 ** -1</code> 返回 <code>0.1</code>。</td></tr></tbody></table><h3 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">⚠️ 警告</p><p>位运算语法还在设计中</p></div><p>位运算符将它的操作数视为 32 位元的二进制串（0 和 1 组成）而非十进制八进制或十六进制数。例如：十进制数字 9 用二进制表示为 1001，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的 WhirlScript 数值。</p><p>下表总结了 WhirlScript 的位运算符。</p><table><thead><tr><th>操作符</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>按位与 AND</td><td><code>a &amp; b</code></td><td>在 a,b 的位表示中，每一个对应的位都为 1 则返回 1，否则返回 0.</td></tr><tr><td>按位或 OR</td><td><code>a | b</code></td><td>在 a,b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1，否则返回 0.</td></tr><tr><td>按位异或 XOR</td><td><code>a ^ b</code></td><td>在 a,b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0.</td></tr><tr><td>按位非 NOT</td><td><code>~ a</code></td><td>反转被操作数的位。</td></tr><tr><td>左移 shift</td><td><code>a &lt;&lt; b</code></td><td>将 a 的二进制串向左移动 b 位，右边移入 0.</td></tr><tr><td>算术右移</td><td><code>a &gt;&gt; b</code></td><td>把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位。(译注：算术右移左边空出的位是根据最高位是 0 和 1 来进行填充的)</td></tr><tr><td>无符号右移 (左边空出位用 0 填充)</td><td><code>a &gt;&gt;&gt; b</code></td><td>把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位，并把左边空出的位都填充为 0</td></tr></tbody></table><h4 id="位逻辑运算符" tabindex="-1">位逻辑运算符 <a class="header-anchor" href="#位逻辑运算符" aria-label="Permalink to &quot;位逻辑运算符&quot;">​</a></h4><p>概念上来讲，位逻辑运算符工作流程如下：</p><ul><li>操作数被转换为 32bit 整數，以位序列（0 和 1 组成）表示。若超過 32bits，則取低位 32bit，如下所示：</li></ul><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  Before: 11100110111110100000000000000110000000000001</span></span>
<span class="line"><span style="color:#e1e4e8;">  After:              10100000000000000110000000000001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  Before: 11100110111110100000000000000110000000000001</span></span>
<span class="line"><span style="color:#24292e;">  After:              10100000000000000110000000000001</span></span></code></pre></div><ul><li>第一个操作数的每一位都与第二个操作数的对应位组对：第一位对应第一位，第二位对应第二位，以此类推。</li><li>运算符被应用到每一对&quot;位&quot;上，最终的运算结果由每一对“位”的运算结果组合起来。</li></ul><p>例如，十进制数 9 的二进制表示是 1001，十进制数 15 的二进制表示是 1111.因此，当位运算符应用到这两个值时，结果如下：</p><table><thead><tr><th>表达式</th><th>结果</th><th>二进制描述</th></tr></thead><tbody><tr><td><code>15 &amp; 9</code></td><td><code>9</code></td><td><code>1111 &amp; 1001 = 1001</code></td></tr><tr><td><code>15 | 9</code></td><td><code>15</code></td><td><code>1111 | 1001 = 1111</code></td></tr><tr><td><code>15 ^ 9</code></td><td><code>6</code></td><td><code>1111 ^ 1001 = 0110</code></td></tr><tr><td><code>~15</code></td><td><code>-16</code></td><td><code>~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000</code></td></tr><tr><td><code>~9</code></td><td><code>-10</code></td><td><code>~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110</code></td></tr></tbody></table><p>注意位运算符“非”将所有的 32 位取反，而值的最高位 (最左边的一位) 为 1 则表示负数 (2-补码表示法)。</p><h4 id="移位运算符" tabindex="-1">移位运算符 <a class="header-anchor" href="#移位运算符" aria-label="Permalink to &quot;移位运算符&quot;">​</a></h4><p>移位运算符带两个操作数：第一个是待移位的数，第二个是指定第一个数要被移多少位的数。移位的方向由运算符来控制。</p><p>移位运算符把操作数转为 32bit 整数，然后得出一个与待移位数相同种类的值。</p><p>移位运算符列表如下。</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>&lt;&lt;</code>（左移位）</td><td>将第一个操作数向左移动指定数量的位。左边移出位被抛弃。左边移出的几位被丢弃。右边多出的空位由 0 补齐。</td><td><code>9&lt;&lt;2</code> 产生 36，因为 1001 移位 2 比特向左变为 100100，它是 36。</td></tr><tr><td><code>&gt;&gt;</code>（带符号右移）</td><td>将第一个操作数向右移动指定数量的位。右边移出位被抛弃。左边多出的空位由原值的最左边数字补齐。</td><td><code>9&gt;&gt;2</code> 产生 2，因为 1001 移位 2 位向右变为 10，其是 2。同样，<code>-9&gt;&gt;2</code> 产生 -3，由于符号被保留。</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><p>逻辑运算符常用于布尔（逻辑）值之间; 当操作数都是布尔值时，返回值也是布尔值。不过实际上<code>&amp;&amp;</code>和<code>||</code>返回的是一个特定的操作数的值，所以当它用于非布尔值的时候，返回值就可能是非布尔值。逻辑运算符的描述如下。</p><table><thead><tr><th>运算符</th><th>范例</th><th>描述</th></tr></thead><tbody><tr><td>逻辑与(<code>&amp;&amp;</code>)</td><td><code>expr1 &amp;&amp; expr2</code></td><td>(逻辑与) 如果 expr1 能被转换为 false，那么返回 expr1；否则，返回<code>expr2</code>。因此<code>，&amp;&amp;</code>用于布尔值时，当操作数都为 true 时返回 true；否则返回 false.</td></tr><tr><td>逻辑或 (<code>||</code>)</td><td><code>expr1 || expr2</code></td><td>(逻辑或) 如果 expr1 能被转换为 true，那么返回 expr1；否则，返回<code>expr2</code>。因此，|| 用于布尔值时，当任何一个操作数为 true 则返回 true；如果操作数都是 false 则返回 false。</td></tr><tr><td>逻辑非 <code>(!)</code></td><td><code>!expr</code></td><td>(逻辑非) 如果操作数能够转换为 true 则返回 false；否则返回 true。</td></tr></tbody></table><p>下面是&amp;&amp;（逻辑&quot;与&quot;）操作符的示例。</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var a1 = true &amp;&amp; true; // t &amp;&amp; t returns true</span></span>
<span class="line"><span style="color:#E1E4E8;">var a2 = true &amp;&amp; false; // t &amp;&amp; f returns false</span></span>
<span class="line"><span style="color:#E1E4E8;">var a3 = false &amp;&amp; true; // f &amp;&amp; t returns false</span></span>
<span class="line"><span style="color:#E1E4E8;">var a4 = false &amp;&amp; 3 == 4; // f &amp;&amp; f returns false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var a1 = true &amp;&amp; true; // t &amp;&amp; t returns true</span></span>
<span class="line"><span style="color:#24292E;">var a2 = true &amp;&amp; false; // t &amp;&amp; f returns false</span></span>
<span class="line"><span style="color:#24292E;">var a3 = false &amp;&amp; true; // f &amp;&amp; t returns false</span></span>
<span class="line"><span style="color:#24292E;">var a4 = false &amp;&amp; 3 == 4; // f &amp;&amp; f returns false</span></span></code></pre></div><p>下面是 ||（逻辑&quot;或&quot;）操作符的示例。</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var o1 = true || true; // t || t returns true</span></span>
<span class="line"><span style="color:#E1E4E8;">var o2 = false || true; // f || t returns true</span></span>
<span class="line"><span style="color:#E1E4E8;">var o3 = true || false; // t || f returns true</span></span>
<span class="line"><span style="color:#E1E4E8;">var o4 = false || 3 == 4; // f || f returns false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var o1 = true || true; // t || t returns true</span></span>
<span class="line"><span style="color:#24292E;">var o2 = false || true; // f || t returns true</span></span>
<span class="line"><span style="color:#24292E;">var o3 = true || false; // t || f returns true</span></span>
<span class="line"><span style="color:#24292E;">var o4 = false || 3 == 4; // f || f returns false</span></span></code></pre></div><p>下面是！（逻辑&quot;非&quot;）操作符的示例。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// !t returns false</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// !f returns true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// !t returns false</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// !f returns true</span></span></code></pre></div><h4 id="短路求值" tabindex="-1">短路求值 <a class="header-anchor" href="#短路求值" aria-label="Permalink to &quot;短路求值&quot;">​</a></h4><p>作为逻辑表达式进行求值是从左到右，它们是为可能的“短路”的出现而使用以下规则进行测试：</p><ul><li><code>false</code> &amp;&amp; <em>anything</em> // 被短路求值为 false</li><li><code>true</code> || <em>anything</em> // 被短路求值为 true</li></ul><p>逻辑的规则，保证这些评估是总是正确的。请注意，上述表达式的<code>anything</code>部分不会被求值，所以这样做不会产生任何副作用。</p><h3 id="字符串运算符" tabindex="-1">字符串运算符 <a class="header-anchor" href="#字符串运算符" aria-label="Permalink to &quot;字符串运算符&quot;">​</a></h3><p>除了比较操作符，它可以在字符串值中使用，连接操作符（+）连接两个字符串值相连接，返回另一个字符串，它是两个操作数串的结合。</p><p>例如，</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">println(&quot;my &quot; + &quot;string&quot;); // console logs the string &quot;my string&quot;.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">println(&quot;my &quot; + &quot;string&quot;); // console logs the string &quot;my string&quot;.</span></span></code></pre></div><p>简写操作符 <code>+=</code> 也可以用来拼接字符串，例如：</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var myString = &quot;alpha&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">myString += &quot;bet&quot;; // 返回 &quot;alphabet&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var myString = &quot;alpha&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">myString += &quot;bet&quot;; // 返回 &quot;alphabet&quot;</span></span></code></pre></div><h3 id="条件-三元-运算符" tabindex="-1">条件（三元）运算符 <a class="header-anchor" href="#条件-三元-运算符" aria-label="Permalink to &quot;条件（三元）运算符&quot;">​</a></h3><p><strong>条件运算符</strong>是 JavaScript 中唯一需要三个操作数的运算符。运算的结果根据给定条件在两个值中取其一。语法为：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">条件 ? 值 1 : 值 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">条件 ? 值 1 : 值 2</span></span></code></pre></div><p>如果<code>条件</code>为真，则结果取<code>值 1</code>。否则为<code>值 2</code>。你能够在任何允许使用标准运算符的地方使用条件运算符。</p><p>例如，</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var status = age &gt;= 18 ? &quot;adult&quot; : &quot;minor&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var status = age &gt;= 18 ? &quot;adult&quot; : &quot;minor&quot;;</span></span></code></pre></div><p>当 <code>age</code> 大于等于 18 的时候，将“adult”赋值给 <code>status</code>；否则将“minor”赋值给 <code>status</code>。</p><h3 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h3><p>运算符的优先级，用于确定一个表达式的计算顺序。在你不能确定优先级时，可以通过使用括号显式声明运算符的优先级。</p><p>下表列出了描述符的优先级，从最高到最低。</p><table><thead><tr><th>类型</th><th>操作符</th></tr></thead><tbody><tr><td>调用</td><td><code>.</code> <code>::</code> <code>()</code></td></tr><tr><td>自增/自减</td><td><code>++</code> <code>--</code></td></tr><tr><td>非</td><td><code>!</code></td></tr><tr><td>乘/除</td><td><code>*</code> <code>/</code> <code>%</code></td></tr><tr><td>加/减</td><td><code>+</code> <code>-</code></td></tr><tr><td>移位</td><td><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></td></tr><tr><td>大小比较</td><td><code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code></td></tr><tr><td>相等判断</td><td><code>==</code> <code>!=</code></td></tr><tr><td>逻辑与</td><td><code>&amp;&amp;</code></td></tr><tr><td>逻辑或</td><td><code>||</code></td></tr><tr><td>条件判断</td><td><code>?:</code></td></tr><tr><td>赋值</td><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></td></tr></tbody></table><h2 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h2><p>表达式是一组代码的集合，它返回一个值。（译注：定义比较不好理解，看下面的举例就很好懂了。）</p><p>每一个合法的表达式都能计算成某个值，但从概念上讲，有两种类型的表达式：有副作用的（比如赋值）和单纯计算求值的。</p><p>表达式 x=7 是第一类型的一个例子。该表达式使用=运算符将值 7 赋予变量 x。这个表达式自己的值等于 7。</p><p>代码 3 + 4 是第二个表达式类型的一个例子。该表达式使用 + 运算符把 3 和 4 加到一起但并没有把结果（7）赋值给一个变量。</p><p>WhirlScript 有以下表达式类型：</p><ul><li>算数：得出一个数字，例如 3.14159。（通常使用<a href="#算术运算符">算数运算符</a>）</li><li>字符串：得出一个字符串，例如，&quot;Fred&quot; 或 &quot;234&quot;。（通常使用<a href="#字符串运算符">字符串运算符</a>。）</li><li>逻辑值：得出 true 或者 false。（经常涉及到<a href="#逻辑运算符">逻辑运算符</a>。）</li><li>基本表达式：WhirlScript 中基本的关键字和一般表达式。</li><li>左值表达式：分配给左值。</li></ul><h3 id="分组操作符" tabindex="-1">分组操作符 <a class="header-anchor" href="#分组操作符" aria-label="Permalink to &quot;分组操作符&quot;">​</a></h3><p>分组操作符（）控制了表达式中计算的优先级。举例来说，你可以改变先乘除后加减的顺序，转而先计算加法。</p><div class="language-WhirlScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">WhirlScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var a = 1;</span></span>
<span class="line"><span style="color:#E1E4E8;">var b = 2;</span></span>
<span class="line"><span style="color:#E1E4E8;">var c = 3;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">// 默认优先级</span></span>
<span class="line"><span style="color:#E1E4E8;">a + b * c; // 7</span></span>
<span class="line"><span style="color:#E1E4E8;">// 默认是这样计算的</span></span>
<span class="line"><span style="color:#E1E4E8;">a + b * c; // 7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">// 现在使加法优先于乘法</span></span>
<span class="line"><span style="color:#E1E4E8;">(a + b) * c; // 9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">// 这等价于</span></span>
<span class="line"><span style="color:#E1E4E8;">a * c + b * c; // 9</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var a = 1;</span></span>
<span class="line"><span style="color:#24292E;">var b = 2;</span></span>
<span class="line"><span style="color:#24292E;">var c = 3;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 默认优先级</span></span>
<span class="line"><span style="color:#24292E;">a + b * c; // 7</span></span>
<span class="line"><span style="color:#24292E;">// 默认是这样计算的</span></span>
<span class="line"><span style="color:#24292E;">a + b * c; // 7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 现在使加法优先于乘法</span></span>
<span class="line"><span style="color:#24292E;">(a + b) * c; // 9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 这等价于</span></span>
<span class="line"><span style="color:#24292E;">a * c + b * c; // 9</span></span></code></pre></div><h3 id="左值表达式" tabindex="-1">左值表达式 <a class="header-anchor" href="#左值表达式" aria-label="Permalink to &quot;左值表达式&quot;">​</a></h3><p>左值可以作为赋值的目标。</p>`,77),n=[o];function c(l,p,r,i,h,u){return e(),a("div",null,n)}const b=t(d,[["render",c]]);export{g as __pageData,b as default};

import{_ as e,o as s,c as t,Q as n}from"./chunks/framework.jBbNkKut.js";const E=JSON.parse('{"title":"Control Flow","description":"","frontmatter":{"prev":{"text":"Grammar and Data Types","link":"/guide/getting-started/grammar-and-types"},"next":{"text":"Function","link":"/guide/getting-started/function"}},"headers":[],"relativePath":"guide/getting-started/control-flow/index.md","filePath":"guide/getting-started/control-flow.md"}'),a={name:"guide/getting-started/control-flow/index.md"},o=n(`<h1 id="control-flow" tabindex="-1">Control Flow <a class="header-anchor" href="#control-flow" aria-label="Permalink to &quot;Control Flow&quot;">​</a></h1><p>In WhirlScript, any expression can be considered a statement.</p><h2 id="statement-blocks" tabindex="-1">Statement Blocks <a class="header-anchor" href="#statement-blocks" aria-label="Permalink to &quot;Statement Blocks&quot;">​</a></h2><p>The most basic statement is a statement block used to combine statements. The block is delimited by a pair of braces.</p><p>Statement blocks are commonly used for flow control, such as <code>if</code>, <code>for</code>, <code>while</code>, etc.</p><p>Statement blocks also indicate scope. Variables declared within a scope become unavailable after leaving the scope.</p><h2 id="conditional-statements" tabindex="-1">Conditional Statements <a class="header-anchor" href="#conditional-statements" aria-label="Permalink to &quot;Conditional Statements&quot;">​</a></h2><p>Conditional statements refer to executing specific statements based on the result (true or false or other predefined) returned by the specified condition.</p><p>Use the if statement to execute a statement when a logical condition is true. When this condition is false, use the optional else clause to execute this statement. The if statement is as follows:</p><div class="language-whirlscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">whirlscript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">if (condition) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement_1;</span></span>
<span class="line"><span style="color:#E1E4E8;">} else {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement_2;</span></span>
<span class="line"><span style="color:#E1E4E8;">} // It is recommended to use a strict block mode, the else statement is optional</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">if (condition) {</span></span>
<span class="line"><span style="color:#24292E;">  statement_1;</span></span>
<span class="line"><span style="color:#24292E;">} else {</span></span>
<span class="line"><span style="color:#24292E;">  statement_2;</span></span>
<span class="line"><span style="color:#24292E;">} // It is recommended to use a strict block mode, the else statement is optional</span></span></code></pre></div><p>The condition can be any expression whose result is calculated as true or false. If the condition expression returns true, the statement_1 statement will be executed; otherwise, statement_2 is executed. statement_1 and statement_2 can be any statement, and you can even nest another if statement in it.</p><p>You can also combine statements by using else if to test multiple consecutive conditions, as follows:</p><div class="language-whirlscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">whirlscript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">if (condition_1) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement_1;</span></span>
<span class="line"><span style="color:#E1E4E8;">} else if (condition_2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement_2;</span></span>
<span class="line"><span style="color:#E1E4E8;">} else if (condition_n_1) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement_n;</span></span>
<span class="line"><span style="color:#E1E4E8;">} else {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statement_last;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">if (condition_1) {</span></span>
<span class="line"><span style="color:#24292E;">  statement_1;</span></span>
<span class="line"><span style="color:#24292E;">} else if (condition_2) {</span></span>
<span class="line"><span style="color:#24292E;">  statement_2;</span></span>
<span class="line"><span style="color:#24292E;">} else if (condition_n_1) {</span></span>
<span class="line"><span style="color:#24292E;">  statement_n;</span></span>
<span class="line"><span style="color:#24292E;">} else {</span></span>
<span class="line"><span style="color:#24292E;">  statement_last;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>To execute multiple statements, you can use a statement block ({ ... }) to group these statements. Generally, always using statement blocks is a good habit, especially when the code involves more if statements.</p>`,14),l=[o];function i(c,p,r,d,m,h){return s(),t("div",null,l)}const _=e(a,[["render",i]]);export{E as __pageData,_ as default};
